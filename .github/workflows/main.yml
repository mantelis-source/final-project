name: Final project workflow
on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main
defaults:
    run:
        shell: bash
env:
  REGION: 'eu-central-1'
  ECS_CLUSTER_NAME: 'ecs_cluster'
  ECS_SERVICE_NAME: 'final-project-service'
  TASK_DEFINITION: 'task_definition.json'
jobs:
    lint-code:
        name: 'Linting code'
        runs-on: ubuntu-latest
        steps:
            - name: 'Checkout reposiroty'
              uses: actions/checkout@v4
            - name: 'Install dependencies'
              run: |
                python -m pip install --upgrade pip
                pip install pylint flask flask_login flask_sqlalchemy
            - name: 'Test python code with pylint'
              working-directory: ./site
              run: |
                pylint app/*.py
    build-publish-image:
        name: 'Build and publish final project image'
        runs-on: ubuntu-latest
        steps:
          - name: 'Checkout reposiroty'
            uses: actions/checkout@v4
          
          - name: 'Build image'
            run: |
              docker build -t mantelis900726/final-project-image:latest .
          - name: 'Publish image'
            run: |
              docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
              docker push mantelis900726/final-project-image:latest
    aws_ecs_task_definition:
        name: 'Change task definition'
        runs-on: ubuntu-latest
        steps:
          - name: 'Checkout repository'
            uses: actions/checkout@v4
          
          - name: 'Configure AWS credentials'
            uses: aws-actions/configure-aws-credentials@v1
            with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
              aws-secret-aceess-key: ${{ secrets.AWS_SECRET_KEY }}
              aws-region: ${{ env.REGION }}
          
          - name: 'Change task definition in cloud'
            uses: aws-actions/amazon-ecs-deploy-task-definition@v1
            with:
              task-definition: ${{ env.TASK_DEFINITION }}
              service: ${{ env.ECS_SERVICE_NAME }}
              cluster: ${{ env.ECS_CLUSTER_NAME }}
              wait-for-service-stability: true